# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  password: PasswordState
  isAdmin: Boolean
  registeredAt: DateTime
  createdAt: DateTime
  mall: Mall
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  firstname: StringFilter
  lastname: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  phoneNumberRegionCode: StringFilter
  isAdmin: BooleanFilter
  registeredAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  mall: MallWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  phoneNumberRegionCode: OrderDirection
  isAdmin: OrderDirection
  registeredAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  password: String
  isAdmin: Boolean
  registeredAt: DateTime
  createdAt: DateTime
  mall: MallRelateToOneForUpdateInput
}

input MallRelateToOneForUpdateInput {
  create: MallCreateInput
  connect: MallWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  password: String
  isAdmin: Boolean
  registeredAt: DateTime
  createdAt: DateTime
  mall: MallRelateToOneForCreateInput
}

input MallRelateToOneForCreateInput {
  create: MallCreateInput
  connect: MallWhereUniqueInput
}

type Client {
  id: ID!
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  registeredAt: DateTime
  createdAt: DateTime
  store: Store
  mall: Mall
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input ClientWhereUniqueInput {
  id: ID
  email: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  firstname: StringFilter
  lastname: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  phoneNumberRegionCode: StringFilter
  registeredAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  store: StoreWhereInput
  mall: MallWhereInput
  payments: PaymentManyRelationFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input ClientOrderByInput {
  id: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  phoneNumberRegionCode: OrderDirection
  registeredAt: OrderDirection
  createdAt: OrderDirection
}

input ClientUpdateInput {
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  registeredAt: DateTime
  createdAt: DateTime
  store: StoreRelateToOneForUpdateInput
  mall: MallRelateToOneForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  phoneNumberRegionCode: String
  registeredAt: DateTime
  createdAt: DateTime
  store: StoreRelateToOneForCreateInput
  mall: MallRelateToOneForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Mall {
  id: ID!
  name: String
  location: JSON
  openingHours: JSON
  totalStores: Int
  createdAt: DateTime
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input MallWhereUniqueInput {
  id: ID
}

input MallWhereInput {
  AND: [MallWhereInput!]
  OR: [MallWhereInput!]
  NOT: [MallWhereInput!]
  id: IDFilter
  name: StringFilter
  totalStores: IntNullableFilter
  createdAt: DateTimeNullableFilter
  users: UserManyRelationFilter
  stores: StoreManyRelationFilter
  clients: ClientManyRelationFilter
  payments: PaymentManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input StoreManyRelationFilter {
  every: StoreWhereInput
  some: StoreWhereInput
  none: StoreWhereInput
}

input ClientManyRelationFilter {
  every: ClientWhereInput
  some: ClientWhereInput
  none: ClientWhereInput
}

input MallOrderByInput {
  id: OrderDirection
  name: OrderDirection
  totalStores: OrderDirection
  createdAt: OrderDirection
}

input MallUpdateInput {
  name: String
  location: JSON
  openingHours: JSON
  totalStores: Int
  createdAt: DateTime
  users: UserRelateToManyForUpdateInput
  stores: StoreRelateToManyForUpdateInput
  clients: ClientRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input StoreRelateToManyForUpdateInput {
  disconnect: [StoreWhereUniqueInput!]
  set: [StoreWhereUniqueInput!]
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input ClientRelateToManyForUpdateInput {
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

input MallUpdateArgs {
  where: MallWhereUniqueInput!
  data: MallUpdateInput!
}

input MallCreateInput {
  name: String
  location: JSON
  openingHours: JSON
  totalStores: Int
  createdAt: DateTime
  users: UserRelateToManyForCreateInput
  stores: StoreRelateToManyForCreateInput
  clients: ClientRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input StoreRelateToManyForCreateInput {
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input ClientRelateToManyForCreateInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

type Store {
  id: ID!
  name: String
  type(where: StoreTypeWhereInput! = {}, orderBy: [StoreTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreTypeWhereUniqueInput): [StoreType!]
  typeCount(where: StoreTypeWhereInput! = {}): Int
  createdAt: DateTime
  mall(where: MallWhereInput! = {}, orderBy: [MallOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MallWhereUniqueInput): [Mall!]
  mallCount(where: MallWhereInput! = {}): Int
  client(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientCount(where: ClientWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input StoreWhereUniqueInput {
  id: ID
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StoreTypeManyRelationFilter
  createdAt: DateTimeNullableFilter
  mall: MallManyRelationFilter
  client: ClientManyRelationFilter
  payments: PaymentManyRelationFilter
}

input StoreTypeManyRelationFilter {
  every: StoreTypeWhereInput
  some: StoreTypeWhereInput
  none: StoreTypeWhereInput
}

input MallManyRelationFilter {
  every: MallWhereInput
  some: MallWhereInput
  none: MallWhereInput
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input StoreUpdateInput {
  name: String
  type: StoreTypeRelateToManyForUpdateInput
  createdAt: DateTime
  mall: MallRelateToManyForUpdateInput
  client: ClientRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input StoreTypeRelateToManyForUpdateInput {
  disconnect: [StoreTypeWhereUniqueInput!]
  set: [StoreTypeWhereUniqueInput!]
  create: [StoreTypeCreateInput!]
  connect: [StoreTypeWhereUniqueInput!]
}

input MallRelateToManyForUpdateInput {
  disconnect: [MallWhereUniqueInput!]
  set: [MallWhereUniqueInput!]
  create: [MallCreateInput!]
  connect: [MallWhereUniqueInput!]
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
  type: StoreTypeRelateToManyForCreateInput
  createdAt: DateTime
  mall: MallRelateToManyForCreateInput
  client: ClientRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

input StoreTypeRelateToManyForCreateInput {
  create: [StoreTypeCreateInput!]
  connect: [StoreTypeWhereUniqueInput!]
}

input MallRelateToManyForCreateInput {
  create: [MallCreateInput!]
  connect: [MallWhereUniqueInput!]
}

type StoreType {
  id: ID!
  name: String
  created_at: DateTime
}

input StoreTypeWhereUniqueInput {
  id: ID
}

input StoreTypeWhereInput {
  AND: [StoreTypeWhereInput!]
  OR: [StoreTypeWhereInput!]
  NOT: [StoreTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  created_at: DateTimeNullableFilter
}

input StoreTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  created_at: OrderDirection
}

input StoreTypeUpdateInput {
  name: String
  created_at: DateTime
}

input StoreTypeUpdateArgs {
  where: StoreTypeWhereUniqueInput!
  data: StoreTypeUpdateInput!
}

input StoreTypeCreateInput {
  name: String
  created_at: DateTime
}

type Payment {
  id: ID!
  client(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientCount(where: ClientWhereInput! = {}): Int
  store: Store
  mall(where: MallWhereInput! = {}, orderBy: [MallOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MallWhereUniqueInput): [Mall!]
  mallCount(where: MallWhereInput! = {}): Int
  paymentMethod: PaymentMethod
  paymentCurrency: PaymentCurrency
  amount: Int
  status: String
  notes: String
  createdAt: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  client: ClientManyRelationFilter
  store: StoreWhereInput
  mall: MallManyRelationFilter
  paymentMethod: PaymentMethodWhereInput
  paymentCurrency: PaymentCurrencyWhereInput
  amount: IntFilter
  status: StringFilter
  notes: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
}

input PaymentUpdateInput {
  client: ClientRelateToManyForUpdateInput
  store: StoreRelateToOneForUpdateInput
  mall: MallRelateToManyForUpdateInput
  paymentMethod: PaymentMethodRelateToOneForUpdateInput
  paymentCurrency: PaymentCurrencyRelateToOneForUpdateInput
  amount: Int
  status: String
  notes: String
  createdAt: DateTime
}

input PaymentMethodRelateToOneForUpdateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
  disconnect: Boolean
}

input PaymentCurrencyRelateToOneForUpdateInput {
  create: PaymentCurrencyCreateInput
  connect: PaymentCurrencyWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  client: ClientRelateToManyForCreateInput
  store: StoreRelateToOneForCreateInput
  mall: MallRelateToManyForCreateInput
  paymentMethod: PaymentMethodRelateToOneForCreateInput
  paymentCurrency: PaymentCurrencyRelateToOneForCreateInput
  amount: Int
  status: String
  notes: String
  createdAt: DateTime
}

input PaymentMethodRelateToOneForCreateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
}

input PaymentCurrencyRelateToOneForCreateInput {
  create: PaymentCurrencyCreateInput
  connect: PaymentCurrencyWhereUniqueInput
}

type PaymentMethod {
  id: ID!
  name: String
  createdAt: DateTime
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input PaymentMethodWhereUniqueInput {
  id: ID
}

input PaymentMethodWhereInput {
  AND: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  NOT: [PaymentMethodWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  payments: PaymentManyRelationFilter
}

input PaymentMethodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input PaymentMethodUpdateInput {
  name: String
  createdAt: DateTime
  payments: PaymentRelateToManyForUpdateInput
}

input PaymentMethodUpdateArgs {
  where: PaymentMethodWhereUniqueInput!
  data: PaymentMethodUpdateInput!
}

input PaymentMethodCreateInput {
  name: String
  createdAt: DateTime
  payments: PaymentRelateToManyForCreateInput
}

type PaymentCurrency {
  id: ID!
  name: String
  symbol: String
  createdAt: DateTime
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input PaymentCurrencyWhereUniqueInput {
  id: ID
}

input PaymentCurrencyWhereInput {
  AND: [PaymentCurrencyWhereInput!]
  OR: [PaymentCurrencyWhereInput!]
  NOT: [PaymentCurrencyWhereInput!]
  id: IDFilter
  name: StringFilter
  symbol: StringFilter
  createdAt: DateTimeNullableFilter
  payments: PaymentManyRelationFilter
}

input PaymentCurrencyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  symbol: OrderDirection
  createdAt: OrderDirection
}

input PaymentCurrencyUpdateInput {
  name: String
  symbol: String
  createdAt: DateTime
  payments: PaymentRelateToManyForUpdateInput
}

input PaymentCurrencyUpdateArgs {
  where: PaymentCurrencyWhereUniqueInput!
  data: PaymentCurrencyUpdateInput!
}

input PaymentCurrencyCreateInput {
  name: String
  symbol: String
  createdAt: DateTime
  payments: PaymentRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createMall(data: MallCreateInput!): Mall
  createMalls(data: [MallCreateInput!]!): [Mall]
  updateMall(where: MallWhereUniqueInput!, data: MallUpdateInput!): Mall
  updateMalls(data: [MallUpdateArgs!]!): [Mall]
  deleteMall(where: MallWhereUniqueInput!): Mall
  deleteMalls(where: [MallWhereUniqueInput!]!): [Mall]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createStoreType(data: StoreTypeCreateInput!): StoreType
  createStoreTypes(data: [StoreTypeCreateInput!]!): [StoreType]
  updateStoreType(where: StoreTypeWhereUniqueInput!, data: StoreTypeUpdateInput!): StoreType
  updateStoreTypes(data: [StoreTypeUpdateArgs!]!): [StoreType]
  deleteStoreType(where: StoreTypeWhereUniqueInput!): StoreType
  deleteStoreTypes(where: [StoreTypeWhereUniqueInput!]!): [StoreType]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod
  createPaymentMethods(data: [PaymentMethodCreateInput!]!): [PaymentMethod]
  updatePaymentMethod(where: PaymentMethodWhereUniqueInput!, data: PaymentMethodUpdateInput!): PaymentMethod
  updatePaymentMethods(data: [PaymentMethodUpdateArgs!]!): [PaymentMethod]
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deletePaymentMethods(where: [PaymentMethodWhereUniqueInput!]!): [PaymentMethod]
  createPaymentCurrency(data: PaymentCurrencyCreateInput!): PaymentCurrency
  createPaymentCurrencies(data: [PaymentCurrencyCreateInput!]!): [PaymentCurrency]
  updatePaymentCurrency(where: PaymentCurrencyWhereUniqueInput!, data: PaymentCurrencyUpdateInput!): PaymentCurrency
  updatePaymentCurrencies(data: [PaymentCurrencyUpdateArgs!]!): [PaymentCurrency]
  deletePaymentCurrency(where: PaymentCurrencyWhereUniqueInput!): PaymentCurrency
  deletePaymentCurrencies(where: [PaymentCurrencyWhereUniqueInput!]!): [PaymentCurrency]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  mall(where: MallWhereUniqueInput!): Mall
  malls(where: MallWhereInput! = {}, orderBy: [MallOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MallWhereUniqueInput): [Mall!]
  mallsCount(where: MallWhereInput! = {}): Int
  store(where: StoreWhereUniqueInput!): Store
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  storeType(where: StoreTypeWhereUniqueInput!): StoreType
  storeTypes(where: StoreTypeWhereInput! = {}, orderBy: [StoreTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreTypeWhereUniqueInput): [StoreType!]
  storeTypesCount(where: StoreTypeWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethods(where: PaymentMethodWhereInput! = {}, orderBy: [PaymentMethodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentMethodWhereUniqueInput): [PaymentMethod!]
  paymentMethodsCount(where: PaymentMethodWhereInput! = {}): Int
  paymentCurrency(where: PaymentCurrencyWhereUniqueInput!): PaymentCurrency
  paymentCurrencies(where: PaymentCurrencyWhereInput! = {}, orderBy: [PaymentCurrencyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentCurrencyWhereUniqueInput): [PaymentCurrency!]
  paymentCurrenciesCount(where: PaymentCurrencyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
